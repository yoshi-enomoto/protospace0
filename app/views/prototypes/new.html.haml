-# 『required: true』を記述することで、フロント側での空送信のバリデートをかける

= form_for @prototype, html: {class: "container proto-new"} do |f|
  -# 下記の記載を書けば、コントローラ側で受け取るキーの記述のみで良い。
  = f.hidden_field :user_id, value: current_user.id
  .col-md-8.col-md-offset-2
    %header.row.user-nav.row
      .col-md-12
        = f.text_field :title, required: true, class: "proto-new-title", placeholder: "Title"

    -# ファイルを選択させる箇所で、『hidden_field』のstatusのvalueを設定することで、画像がメインかサブかを指定させる。
    .row
      .col-md-12
        .cover-image-upload
          = f.fields_for :captured_images do |image|
            -# コントローラ側でインスタンスを生成していない場合は下記の書き方
            -# = f.fields_for :captured_images, @prototype.captured_images.build do |image|
            = image.hidden_field :status, value: "main"
            = image.file_field :content, required: true
            #main_preview
      .col-md-12
        %ul.proto-sub-list.list-group
          -# サブ画像は３つまでの為、このように記述する（コントローラ側で設定してない為）
          - 3.times do |i|
            %li.list-group-item.col-md-4
              .image-upload
                = f.fields_for :captured_images do |image|
                  -# コントローラ側でインスタンスを生成していない場合は下記の書き方
                  -# = f.fields_for :captured_images, @prototype.captured_images.build do |image|
                  = image.hidden_field :status, value: "sub"
                  = image.file_field :content
                  %div{id: "sub_#{i+1}_preview"}
          -# 静的ページ時の記述を残す（３つ目がアイコン『+』で表示されていたので）
            %li.list-group-item.col-md-4
              .image-upload
                %input{type: "file"}
            %li.list-group-item.col-md-4
              .image-upload-plus
                %span +

    .row.proto-description
      .col-md-12
        = f.text_field :catch_copy, required: true, placeholder: "Catch Copy"
      .col-md-12
        = f.text_area :concept, required: true, cols: "30", rows: "4", placeholder: "Concept"
      .col-md-12
        %h4 Tag List
        .row
          .col-md-3
            = text_field_tag :"prototype[tag_list][]", "", placeholder: "Web Design"
          .col-md-3
            = text_field_tag :"prototype[tag_list][]", "", placeholder: "UI"
          .col-md-3
            = text_field_tag :"prototype[tag_list][]", "", placeholder: "Application"

          / 『f.text_field』の場合の書きかけ
          / name属性はテーブルカラムに該当する必要がある。『message[:body]（モデルに沿った場合）』
          / 下記はビューは生成される。
          / .col-md-3
          /   = f.text_field :tag_ids, placeholder: "Web Design"
          / .col-md-3
          /   = f.text_field :tag_ids, placeholder: "UI"
          / .col-md-3
          /   = f.text_field :tag_ids, placeholder: "Application"
    .row.text-center.proto-btn
      = f.submit "Publish", class: "btn btn-lg btn-primary btn-block"
